TODO :


!!! Objectifs : !!!
- que les gens intéragissent ensemble
- que le rendu soit intéressant à regarder
- que les gens dansent en soi



Checklist si problème :
- Couper tous les parefeux dans un sens ou dans l'autre
- avoir une adresse en 192.168... - 169.. -> pas bon
- quelle adresse OSC ?
- Runinlocal checked ? 
- Wifi + ethernet activé quelque part ? (peut créer une communication à sens unique)
- pb trackers : dongle connecté au wifi à un moment ?
- openvr même version ?
- si les deux controllers sont masqués -> Reboot


Dionysis : 
- Avoir les manettes à disposition pour le public 


Priorités :

- faire un exe server et un exe client
- régler les cas de startcoroutine enable/disable
- Miroir
- Adaptateur wifi
- Calibration bi-espace


Notes 20/5
- Pouvoir avoir plus de particules lorque mouvement rapide, puis pouvoir collider avec
- Pourquoi pas d'ombres sur le viewer ? (param shadow différents)
- Problème de debrancher/rebrancher le casque au démarrage
- Avoir un display pour l'UI et un autre pour le casque
- désactiver les objets "Model" automatiquement


Julien :
- Avoir un questionnaire - avez vous vu l'expérience avant ?
- Quel sampling rate / possibilité d'upsampler ?

Matthieu :
- Très haut du corps dû à l'absence de jambes , avoir un repère bassin ?
- Dessiner au sein d'une sphère qui dessine aussi autour de l'autre, ou que sur l'autre
-> dans la même idée, chacun est tout seul dans la scène, le dessin de l'autre se crée autour de moi, moi je dessine sur l'autre sans que je voie ce qu'il se passe
--> dessiner sur la sphère qui entoure l'autre -> dist(main - tête) * rayon
- "si lui il a un truc au dessus de la tête, forcément moi je l'ai aussi" -> présupposé

Klint :
- Traces avec particules inheritées super fun , changer la représentation si mouvements synchros
- Corps elastique, pouvoir avoir les balles bien plus loin avec les bras tendus
- Pouvoir changer la couleur des balles

Asaf :
- trace sur la tête mais avec deux secondes de transparence



Prio1 :
- UI VR probleme
- désactiver le casque en mode serveur (userVRHeadset marche pas)
- pouvoir rejouer une performance CSV
- désactiver colliders sur les spheres si projet déployé (ou si ce n'est pas le current player)
- server ne doit pas avoir de camera scene ?
- bouton calibration -> les participants se retrouvent à un mètre l'un de l'autre quelle que soit leur position réelle -> replacer l'ensemble du monde au centre des deux personnes - on veut que les danseurs se placent à l'endroit où ils se retrouveront l'un en face de l'autre, avec l'environnement aligné. On doit donc altérer la position de l'autre et la position de l'environnement - on doit enregistrer le gap par rapport au point 0 mais les capteur vive doivent rester aligner -> décaler pour chaque participant à la fois le monde et les partenaires. Le serveur doit donc connaitre la position relative de tout le monde et envoyer un ordre de calibration de l'environnement lors du clic sur le bouton calibration. Chaque participant reste physiquement aligné avec l'ensemble de l'environnement, tout est par contre décalé par le serveur. Mettre des repères au sol symbolisant la position de départ et un flash lors de la calibration ?
Calibrate enregistre donc toutes les positions actuelles des danseurs, et calcule la position centrale où ils doivent se retrouver pour être l'un en face de l'autre. Il store pour chaque danseur ce gap, et envoie à tout le monde la position adaptée (gap du joueur adverse + gap du joueur cible !). Chaque joueur ne prenant pas en compte 
- penser à enregistrer la position relative et non la position réelle dans les csv. 


Prio2 :
- repères visuels du monde réel
- enregistrement des noms des participants associés à leurs IDs
- Trail texture fumée
- Network manager ne gère que des peers, usermanager gère les positions et les gameobjects, get/set pour communiquer l'un avec l'autre


Prio3 :
- fsync ?
- marquer le temps avec un bouton
- virer le mode runinlocal -> plutôt identifier si ip server et ip client son pareils, dans ce cas envoyer un port diff à la registration
- waiting for server devrait invoker un init régulier d'OSC
- faire un ping in/out et mesurer le temps de latence
- ne pas pouvoir modifier les ip/ports dans l'éditeur pour forcer à l'utilisation du json - les mettre tous à 0 ?

Prio4
- adapter la config pour avoir possiblement 5 membres envoyés , transformer les slots en list de Gameobjects
- checker la fin de l'enregistrement des fichiers -message d'erreur quand en écriture
- Viz - fusion avec l'autre ? (toile d'araignée, fils,)
- Sauver la trace
- avoir plein de sphères qui bougent



Done:
- mettre un champ pour renseigner les prénoms des participants au démarrage
- pouvoir éditer le temps des trails
- mettre le nom au dessus de la tête pour les viewers
- ajouter les messages OSC d'orientation de la tête
- Faire des gros boutons au début pour paramétrer vite le client/serveur et viewer/player
- offrir un GUI au serveur afin de pouvoir changer les modes d'affichage rapidement
- ajouter les messages OSC d'orientation de la tête
- Problème pour viewer, serveur crée quand même un joueur et client n'a pas la confirmation d'enregistrement
- enregistrer les rotations ? sous quelle forme
- ajouter des contrôles pour le viewer afin de lui permettre de choisir son point de vue
- miroir
déocher use vr headset quand on est server
lancer le client automatiquement si VR
filepath encore calé sur mon 



-----------------------------------------------------------

Workshop Artec : 
https://docs.google.com/document/d/1n7zsj8FU2iJMob8DN4jmzC_PnF_lnULN8pXtodo_VDM/edit







README 

-- serveur - n'a pas d'affichage de la scène, c'est juste un GUI qui renvoie les positions de chaque client et peut changer le mode d'affichage
    - parmi eux : voir les mains de l'autre, voir juste ses mains, voir des trainées sur les mains de l'autre, voir des trainées sur les siennes aussi,
    un bouton par mode

-- client viewer : peut choisir le point de vue de chaque joueur / piloter une cam en free mode / avoir un plan d'ensemble, fonctionne comme
un client normal et ajoute des joueurs + leur point de vue (besoin de l'orientation de la cam)

Le Client register sur le réseau en envoyant son propre port d'écoute et son adresse IP par le biai du combo serverIP/remotePort
Si le port local du client n'est pas enregistré, le serveur l'ajoute à sa liste de pairs
Client envoie une requête avec son port d'écoute
Si le port est disponible, server renvoie une confirmation ainsi que la liste de tous les joueurs déjà présents
Si client reçoit la confirmation, il enregistre tous les joueurs présents, passe en mode jeu et envoie sa position

Dans le update :
- les clients envoient leurs positions au server
- le server envoie toutes les positions à tous les joueurs

Chaque userdata contient ses informations de connexion
le serveur peut garder un dictionnaire d'userdata qui contiendra les infos de contact en lui
tous les clients ne font qu'actualiser les positions de chaque entrée dans le dictionnaire


PB-SOLVER

checker l'ouverture des ports au niveau du partfeu
activer mode debug
checker les logs
regarder les adresses dans les Gameobjects